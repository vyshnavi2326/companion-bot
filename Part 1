Part 1: Structure and Mechanism
1. Bot Size and Design:
Pocket-Friendly Size: Aim for a compact design, roughly the size of a palm (~10-12 cm tall). Use lightweight materials for easy portability.
Enclosure: A small 3D-printed shell or acrylic case can house all the internal components (OLED display, sensors, microcontroller, battery).
You can 3D-print a housing based on Eilik’s minimalistic design, with space for the display, buttons, and sensors.
Include cutouts for charging ports, sensors, and LEDs.

2. Core Components:
(a) Microcontroller:
Use ESP32 (preferred for Bluetooth capabilities) or a Raspberry Pi Zero W for more computational power.
The microcontroller will manage the sensors, display, sound, and act as the brain of the bot.

(b) Power Supply:
Battery: A LiPo battery (3.7V) with a capacity of around 1000-1500 mAh will provide enough power for several hours of usage.
Charging Circuit: Use a TP4056 charging module to handle charging and protection.

(c) Display:
Use a 0.96" OLED Display (128x64 pixels), connected via I2C, to show facial expressions and other visual outputs.

(d) Sensors:
Capacitive Touch Sensors (connected via GPIO pins): Detect when the user touches different parts of the bot.
Microphone Module: To detect loud sounds or music.
Proximity Sensor: (Optional) for detecting nearby objects or gestures.

(e) Sound Module:
Use a small piezo buzzer or small speaker with an I2S sound module (or DAC) for sound outputs (like beeps or simple music).

(f) Motors:
Micro Servo Motors: Use 2-3 micro servos for small, lifelike movements like nodding the head, moving the arms,
 or other simple gestures.
Servos should be controlled via PWM pins on the microcontroller.

(g) Bluetooth Module:
Use the built-in Bluetooth on ESP32 or add a Bluetooth module for the Raspberry Pi to enable communication with mobile devices.

(h) LEDs:
RGB LEDs: These can add colorful feedback (e.g., for emotions or status indications).

3. Mechanical Assembly:
Mounting the Display: Secure the OLED display in the front face of the bot's housing for easy visibility.
Placing the Sensors: Place touch sensors on different parts of the bot's body (head, sides) for interaction. Attach the proximity
 sensor near the base to detect motion.
Motor Placement: Attach micro servos to move small arms or the head to mimic emotions or interactions.

4. Connectivity:
Wiring:
Use jumper wires to connect the components to the microcontroller. Ensure good cable management inside the small housing.
Use I2C for the OLED and sensors and GPIO pins for touch sensors, buttons, and servo motors.

5. Tools and Materials:
3D Printer: For creating the body and housing (optional but recommended).
Soldering Kit: To solder connections securely, especially for the touch sensors and power connections.
Jumper Wires: For connecting sensors, display, and motors to the microcontroller.
Micro USB Cable: For powering and programming the microcontroller.

Part 1: Structure and Mechanism (Detailed Enhancements)
Component Selection:
Microcontroller (ESP32/Raspberry Pi):

1.ESP32 is preferred for lightweight operations, built-in Bluetooth/Wi-Fi, and a lower power consumption . The Raspberry Pi is an alternative for more powerful processing, suitable if you need more complex AI features or a camera module.
Where to buy: ESP32 is available on platforms like Amazon or Adafruit.
Why these components: ESP32’s small size allows for a pocket-friendly design, making it ideal for a compact bot like Eilik.

2.Servo Motors (SG90):
These are affordable (~$2 each) and lightweight, with enough torque for head/arm movement. You’ll need about 2-4 servos depending on the bot’s number of moving parts.
Why SG90: It’s a micro-servo, allowing compact movement without taking up much space in the bot’s structure.

3.Sensors:
Touch Sensors: Use TTP223 capacitive touch sensors (~$1 each), compact and sensitive to light touch, suitable for detecting when the bot is touched on its head, arms, or body.
Sound Sensors: A KY-038 sound sensor (~$2) can detect sound levels and trigger expressions like "surprise" when a loud noise is detected.
Why these sensors: They’re budget-friendly and can easily integrate with ESP32/Raspberry Pi for basic input/output operations.

4.OLED Display (128x64 Adafruit SSD1306):
This small display (~$10) will serve as the "face" of the robot, showing various emotions and animations.
Why OLED: Low power consumption, compact, and easy to integrate with microcontrollers.

5.Microphone:
For sound detection, an external microphone module (~$5) such as MAX9814 can be used to detect audio input.

6.LiPo Battery and Charging Module:
A 3.7V 1000mAh LiPo battery ($3) is enough to power the bot for several hours depending on usage.
Why this setup: LiPo batteries are lightweight, rechargeable, and sufficient for small bots, while the TP4056 allows for easy recharging without removing the battery.

Power Management:

7.Battery Selection:
Choose a 3.7V LiPo battery, and ensure your components can operate under this voltage (if not, use a boost converter to raise the voltage to 5V for components like the Raspberry Pi).
Use a TP4056 LiPo charger for charging the battery safely via USB. Include an MT3608 step-up converter to ensure the voltage is boosted to 5V if required.
Example: The OLED display and touch sensors can run directly on 3.3V from ESP32, while servos often need 5V.

8.Wiring Diagram:
Power Distribution: Connect the LiPo battery to the TP4056 charging module. The output from the module powers the microcontroller (ESP32 or Raspberry Pi). If you’re using servos, connect them via a 5V pin or step-up converter.
Ensure all components share a common ground (GND).

9.Voltage Regulation:
For voltage-sensitive components, use voltage regulators or a step-up/down converter to match their specific voltage requirements (e.g., use a 7805 voltage regulator for 5V output).
Diagram: Draw a wiring diagram showing how the battery connects to the controller and how each component (OLED, servos, sensors) receives power.

10.Mechanical Assembly:
3D Printed Body:
Design a simple 3D-printed frame for your bot. Ensure there are dedicated sections for housing the microcontroller, OLED display (front face), sensors, and servo motors.
Example: The OLED display sits flush on the front face of the bot, with touch sensors hidden underneath a thin layer of plastic or flexible material. The servos controlling arm/head movements are placed inside the body, with wires neatly routed to avoid tangling.
Servo Placement:
The servos should be securely mounted to allow smooth movement of the arms and head. Use brackets or 3D-printed holders to fix them in place. Ensure the connections between the servos and the moving parts (head, arms) are secure but flexible for smooth operation.

Assembly Steps:
1.Mount the OLED display on the front of the bot.
2.Install the servos inside the bot's body for arm and head movements.
3.Place the microcontroller and ensure all components are securely connected to the correct power sources.
4.Wire up the sensors and place them under a thin plastic cover to ensure proper touch detection without them being visible.

1. Wiring and Connection Tools
Before starting the wiring process, you’ll need some basic tools to connect and solder the components together:

->Soldering Iron and Solder: For permanent connections between wires and components.
->Breadboard and Jumper Wires: If you’re prototyping the circuit before soldering, use a breadboard for easy plug-and-play connections.
->Heat Shrink Tubing: To protect soldered wires from shorting and ensure durability.
->Screwdrivers and Pliers: To fasten or adjust components during assembly.

2. Connection Resources for Components
->Microcontroller (ESP32 or Raspberry Pi Pico) Connections
->ESP32 Pinout Diagram: ESP32 Pinout Resource

->OLED Display (128x64 Adafruit SSD1306):
->Connect VCC to 3.3V pin on ESP32.
->GND to GND pin.
->SCL to GPIO 22 (I2C Clock).
->SDA to GPIO 21 (I2C Data).
->Touch Sensors (TTP223):
->Connect VCC to 3.3V on ESP32.
->GND to GND.
->Output pin SIG to any GPIO pin (e.g., GPIO 15 for one touch sensor).
->Servo Motors (SG90):
->Power the servos via an external 5V supply (since ESP32 can’t provide enough current).
->Connect VCC to 5V, GND to GND.
->Control pin to a GPIO (e.g., GPIO 18).
->Sound Sensor (KY-038 or MAX9814):
->VCC to 3.3V.
->GND to GND.
->OUT to GPIO 34 for reading the analog signal.
->Raspberry Pi Pico Pinout: Raspberry Pi Pico Pinout Resource
->Connections for Raspberry Pi Pico would be similar, except for different GPIO pin mappings.

Power Supply and Charging Module
->LiPo Battery (3.7V 1000mAh) should be connected to:
->TP4056 Charging Module:
->BAT+ and BAT- for the battery.
->OUT+ and OUT- connected to the microcontroller’s power input (or boost converter if needed).
->USB input to charge the battery when required.
->Step-Up Voltage Converter (MT3608): This boosts the 3.7V from the LiPo battery to 5V for servos and any other 5V components.
->Input from battery’s output.
->Output to power the servos or Raspberry Pi.

Wiring Diagram Resource:
->For LiPo Battery and TP4056 wiring: TP4056 Module Guide
->Boost Converter Wiring: MT3608 Step-Up Converter

3. Specific Connection Diagrams
A. Basic ESP32 Connections Diagram
You can use this resource for a simple, breadboard-based diagram: ESP32 OLED and Sensor Connections
B. OLED Display Wiring Guide
Adafruit offers a comprehensive guide to wiring up the OLED display, including I2C configurations: Adafruit SSD1306 Guide
C. Servo Motor Wiring
Servo motor control using ESP32’s PWM functionality is explained here: Servo with ESP32

4. Wiring Resources for Sensors and Actuators
Touch Sensor Wiring (TTP223)
Touch sensor can be connected using this basic setup: TTP223 Capacitive Touch Wiring
Sound Sensor (KY-038 or MAX9814)
Here’s how to connect the sound sensor for basic sound detection: Sound Sensor with ESP32

5. ROS2 Integration Resources
ESP32 with ROS2
For using ESP32 with ROS2, install Micro-ROS to communicate directly with the ROS2 environment. Follow this tutorial to set it up:
ESP32 Micro-ROS Integration
ROS2 Package Creation Tutorial
Follow this resource for creating your ROS2 package for integrating multiple sensors and modules: ROS2 Package Creation

6. General Robot Wiring Resources
For a more comprehensive view, you can check the following resources:

Fritzing (Free software to draw and simulate wiring diagrams): Fritzing Download
Instructables: Robot Wiring and Assembly Guide

